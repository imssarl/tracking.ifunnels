<?xml version="1.0" encoding="ISO-8859-1" ?>
<package version="1.0">
  <name>XML_HTMLSax3</name>
  <summary>A SAX parser for HTML and other badly formed XML documents</summary>
  <description>XML_HTMLSax3 is a SAX based XML parser for badly formed XML documents, such as HTML.
  The original code base was developed by Alexander Zhukov and published at http://sourceforge.net/projects/phpshelve/. Alexander kindly gave permission to modify the code and license for inclusion in PEAR.

  PEAR::XML_HTMLSax3 provides an API very similar to the native PHP XML extension (http://www.php.net/xml), allowing handlers using one to be easily adapted to the other. The key difference is HTMLSax will not break on badly formed XML, allowing it to be used for parsing HTML documents. Otherwise HTMLSax supports all the handlers available from Expat except namespace and external entity handlers. Provides methods for handling XML escapes as well as JSP/ASP opening and close tags.

  Version 1.x introduced an API similar to the native SAX extension but used a slow character by character approach to parsing.

  Version 2.x has had it's internals completely overhauled to use a Lexer, delivering performance *approaching* that of the native XML extension, as well as a radically improved, modular design that makes adding further functionality easy.

  Version 3.x is about fine tuning the API, behaviour and providing a mechanism to distinguish HTML &quot;quirks&quot; from badly formed HTML (later functionality not yet implemented)

  A big thanks to Jeff Moore (lead developer of WACT: http://wact.sourceforge.net) who's largely responsible for new design, as well input from other members at Sitepoint's Advanced PHP forums: http://www.sitepointforums.com/showthread.php?threadid=121246.

  Thanks also to Marcus Baker (lead developer of SimpleTest: http://www.lastcraft.com/simple_test.php) for sorting out the unit tests.</description>
  <maintainers>
    <maintainer>
      <user>hfuecks</user>
      <name>Harry Fuecks</name>
      <email>hfuecks@phppatterns.com</email>
      <role>lead</role>
    </maintainer>
  </maintainers>
  <release>
    <version>3.0.0RC1</version>
    <date>2004-06-02</date>
    <license>PHP</license>
    <state>beta</state>
    <notes>* Re PEAR version naming rules, you now include XML/HTMLSax3.php and the main class is called XML_HTMLSax3
* Now able to parse Word generated HTML - fixed bug with parsing of XML escape sequences
* API break (minor): no longer extends PEAR
* API break (minor): attributes with no value (like option selected) are now populated with NULL instead of TRUE
* API break (minor): replaced XML_OPTION_FULL_ESCAPES with XML_OPTION_STRIP_ESCAPES - by default you now get back the complete escape sequence
* Added some more examples</notes>
    <deps>
      <dep type="php" rel="ge" version="4.0.5"/>
      <dep type="ext" rel="has">pcre</dep>
    </deps>
    <provides type="class" name="XML_HTMLSax3_StateParser" />
    <provides type="class" name="XML_HTMLSax3_StateParser_Lt430" extends="XML_HTMLSax3_StateParser" />
    <provides type="class" name="XML_HTMLSax3_StateParser_Gtet430" extends="XML_HTMLSax3_StateParser" />
    <provides type="class" name="XML_HTMLSax3_NullHandler" />
    <provides type="class" name="XML_HTMLSax3" />
    <provides type="function" name="XML_HTMLSax3_StateParser::unscanCharacter" />
    <provides type="function" name="XML_HTMLSax3_StateParser::ignoreCharacter" />
    <provides type="function" name="XML_HTMLSax3_StateParser::scanCharacter" />
    <provides type="function" name="XML_HTMLSax3_StateParser::scanUntilString" />
    <provides type="function" name="XML_HTMLSax3_StateParser::scanUntilCharacters" />
    <provides type="function" name="XML_HTMLSax3_StateParser::ignoreWhitespace" />
    <provides type="function" name="XML_HTMLSax3_StateParser::parse" />
    <provides type="function" name="XML_HTMLSax3_StateParser_Lt430::scanUntilCharacters" />
    <provides type="function" name="XML_HTMLSax3_StateParser_Lt430::ignoreWhitespace" />
    <provides type="function" name="XML_HTMLSax3_StateParser_Lt430::parse" />
    <provides type="function" name="XML_HTMLSax3_StateParser_Gtet430::scanUntilCharacters" />
    <provides type="function" name="XML_HTMLSax3_StateParser_Gtet430::ignoreWhitespace" />
    <provides type="function" name="XML_HTMLSax3_StateParser_Gtet430::parse" />
    <provides type="function" name="XML_HTMLSax3_NullHandler::DoNothing" />
    <provides type="function" name="XML_HTMLSax3::set_object" />
    <provides type="function" name="XML_HTMLSax3::set_option" />
    <provides type="function" name="XML_HTMLSax3::set_data_handler" />
    <provides type="function" name="XML_HTMLSax3::set_element_handler" />
    <provides type="function" name="XML_HTMLSax3::set_pi_handler" />
    <provides type="function" name="XML_HTMLSax3::set_escape_handler" />
    <provides type="function" name="XML_HTMLSax3::set_jasp_handler" />
    <provides type="function" name="XML_HTMLSax3::get_current_position" />
    <provides type="function" name="XML_HTMLSax3::get_length" />
    <provides type="function" name="XML_HTMLSax3::parse" />
    <provides type="class" name="XML_HTMLSax3_StartingState" />
    <provides type="class" name="XML_HTMLSax3_TagState" />
    <provides type="class" name="XML_HTMLSax3_ClosingTagState" />
    <provides type="class" name="XML_HTMLSax3_OpeningTagState" />
    <provides type="class" name="XML_HTMLSax3_EscapeState" />
    <provides type="class" name="XML_HTMLSax3_JaspState" />
    <provides type="class" name="XML_HTMLSax3_PiState" />
    <provides type="function" name="XML_HTMLSax3_StartingState::parse" />
    <provides type="function" name="XML_HTMLSax3_TagState::parse" />
    <provides type="function" name="XML_HTMLSax3_ClosingTagState::parse" />
    <provides type="function" name="XML_HTMLSax3_OpeningTagState::parseAttributes" />
    <provides type="function" name="XML_HTMLSax3_OpeningTagState::parse" />
    <provides type="function" name="XML_HTMLSax3_EscapeState::parse" />
    <provides type="function" name="XML_HTMLSax3_JaspState::parse" />
    <provides type="function" name="XML_HTMLSax3_PiState::parse" />
    <provides type="class" name="XML_HTMLSax3_Trim" />
    <provides type="class" name="XML_HTMLSax3_CaseFolding" />
    <provides type="class" name="XML_HTMLSax3_Linefeed" />
    <provides type="class" name="XML_HTMLSax3_Tab" />
    <provides type="class" name="XML_HTMLSax3_Entities_Parsed" />
    <provides type="class" name="XML_HTMLSax3_Entities_Unparsed" />
    <provides type="class" name="XML_HTMLSax3_Escape_Stripper" />
    <provides type="function" name="XML_HTMLSax3_Trim::trimData" />
    <provides type="function" name="XML_HTMLSax3_CaseFolding::foldOpen" />
    <provides type="function" name="XML_HTMLSax3_CaseFolding::foldClose" />
    <provides type="function" name="XML_HTMLSax3_Linefeed::breakData" />
    <provides type="function" name="XML_HTMLSax3_Tab::breakData" />
    <provides type="function" name="XML_HTMLSax3_Entities_Parsed::breakData" />
    <provides type="function" name="XML_HTMLSax3_Entities_Unparsed::breakData" />
    <provides type="function" name="XML_HTMLSax3_Escape_Stripper::strip" />
    <provides type="function" name="html_entity_decode" />
    <filelist>
      <file role="php" baseinstalldir="XML" md5sum="4791d84767c7cce8cb85a09b4bc4d913" name="HTMLSax3.php"/>
      <file role="php" baseinstalldir="XML" md5sum="81dc4bd5d67615c22f4099a5182d05c6" name="HTMLSax3/States.php"/>
      <file role="php" baseinstalldir="XML" md5sum="991955ef57adeeff9d05ad7216fb1c7e" name="HTMLSax3/Decorators.php"/>
      <file role="doc" baseinstalldir="XML" md5sum="e55b212f3485fb92c2d4fc9c225d408f" name="docs/Readme"/>
      <file role="doc" baseinstalldir="XML" md5sum="069662117a0fbea381abad112d47b150" name="docs/examples/SimpleExample.php"/>
      <file role="doc" baseinstalldir="XML" md5sum="9ba049b34fdb12b328716433ef9598b0" name="docs/examples/HTMLtoXHTML.php"/>
      <file role="doc" baseinstalldir="XML" md5sum="927697c9a4090472c9b52acf5fa2f297" name="docs/examples/ExpatvsHtmlSax.php"/>
      <file role="doc" baseinstalldir="XML" md5sum="6d8e0358d7581138624843192f29b1fc" name="docs/examples/example.html"/>
      <file role="doc" baseinstalldir="XML" md5sum="fbf07a95c981cc40823dec345af99c3d" name="docs/examples/WordDoc.php"/>
      <file role="doc" baseinstalldir="XML" md5sum="0ff3c67cf9e09dd8a0088aa14e633449" name="docs/examples/worddoc.htm"/>
      <file role="doc" baseinstalldir="XML" md5sum="010de9495fe6793a9c95e9dc7170b493" name="docs/examples/SimpleTemplate.php"/>
      <file role="doc" baseinstalldir="XML" md5sum="046e56d70a8e614417f73ea82c87e622" name="docs/examples/simpletemplate.tpl"/>
      <file role="test" baseinstalldir="XML" md5sum="58a613410f75656db17d6d0ea27e2534" name="tests/index.php"/>
      <file role="test" baseinstalldir="XML" md5sum="3d7e5c0266f5c807e9b21a194630f17b" name="tests/unit_tests.php"/>
      <file role="test" baseinstalldir="XML" md5sum="4b67baeaf8d3032ffd55affef4c8a7ff" name="tests/xml_htmlsax_test.php"/>
    </filelist>
  </release>
  <changelog>
    <release>
      <version>2.1.2</version>
      <date>2003-12-05</date>
      <state>stable</state>
      <notes>* Bug fixed (thanks Jeff) where badly formed attributes resulted in infinite loop
* Added additional boolean argument to open and close handler calls to spot empty tags like br/ - should not break exising APIs
* Added XML_OPTION_FULL_ESCAPES which (when = 1) passes through the complete content in an XML escape, allowing comment / cdata reconstruction
</notes>
    </release>
    <release>
      <version>2.1.1</version>
      <date>2003-10-08</date>
      <state>stable</state>
      <notes>* Reporting of byte index with get_current_position() more accurate on opening tags (thanks to Alexander Orlov at x-code.com)
* All parser options now available to PHP versions lt 4.3.x, using implementation of html_entity_decode in PHP


</notes>
    </release>
    <release>
      <version>2.1.0</version>
      <date>2003-09-10</date>
      <state>stable</state>
      <notes>* Well (unit) tested with SimpleTest


</notes>
    </release>
    <release>
      <version>2.0.2</version>
      <date>2003-08-11</date>
      <state>alpha</state>
      <notes>* API is backwards compatible apart from the renaming of parser options
* Performance dramatically increased. Not much slower than Expat
* Better handling of XML comments and CDATA
* Option to trigger additional data handler calls for linefeeds and tabs
* Option to trigger additional data handler calls for XML entities and parse them if required.
* Added public get_current_position() and get_length() methods


</notes>
    </release>
    <release>
      <version>1.1</version>
      <date>2003-06-26</date>
      <state>stable</state>
      <notes>* Bug fixes to Attribute_Parser to cope with newline, tag, forward slash and whitespace issues.

</notes>
    </release>
    <release>
      <version>1.0</version>
      <date>2003-06-08</date>
      <state>stable</state>
      <notes>* Modifications to file structure to place Attributes_Parser.php
  and State_Machine.php in subdirectory HTMLSax
* XML_HTMLSax.php includes Attributes_Parser.php and State_Machine.php
  using require_once()


</notes>
    </release>
    <release>
      <version>0.9.0rc2</version>
      <date>2003-05-18</date>
      <state>beta</state>
      <notes>*First release under PEAR
*Changed package name to XML_HTMLSax
*Added patch from John Luxford to parse single quoted attributes
*Modified State_Machine to be a simple variable store




</notes>
    </release>
    <release>
      <version>0.9.0rc1</version>
      <date>2003-05-09</date>
      <state>beta</state>
      <notes>A summary of the main differences between this version
      of HTML_Sax and HTMLSax2002082201 are as follows;
      *Instead of extending HTMLSax with your own &quot;handlers&quot; class,
       you now use the set_object() method to pass an instance of the
       class to HTMLSax.
      *Class method callbacks are specified using the following methods;
      *set_element_handler('startHandler','endHandler') &lt;tag&gt; and &lt;/tag&gt;
      *set_data_handler('dataHandler') for contents of an element
      *set_pi_handler('piHandler') for &lt;?php ?&gt;, &lt;?xml ?&gt; etc.
      *set_escape_handler(') for anything beginning with &lt;!
      *set_jasp_handler() - set listener for &lt;% %&gt; tags
      *Attributes which no value are created and set to true
      *Comments are handled and may contain entities; &lt; &gt;
      *The callback handlers will all be passed an instance of HTMLSax
       in the same way as the native PHP XML Expat extension
      *Setting of parser options is handled specifically by the set_option()
       method. Available options are;
      *skipWhiteSpace; instruct the parser to ignore whitespace characters
      *trimDataNodes; trim whitespace inside character data
      *breakOnNewLine; newline characters found in character data are treated
       as new events triggering another data callback
      *caseFolding; converts element names to uppercase


</notes>
    </release>
  </changelog>
</package>
