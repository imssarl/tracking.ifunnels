<?phpclass xmlParser{var $xml_obj = null;var $output = array();var $attrs;var $feed = array("","","");var $start = true;var $middle = false;var $end = false;var $pause = false;var $total_items = 1;var $max_items = 0;var $olddata="";var $createnew = false;var $feeddir = "temp_data/";   function xmlParser(){        $this->xml_obj = xml_parser_create();       xml_set_object($this->xml_obj,$this);       xml_set_character_data_handler($this->xml_obj, 'dataHandler');       xml_set_element_handler($this->xml_obj, "startHandler", "endHandler");   }   function parse($path){       /*       if (!($fp = @fopen($path, "rb"))) {	   		$this->createnew = true;           echo "Cannot open XML data file: ".$path;           return false;       }       rewind ( $fp );       while ($data = fread($fp, 4096)) {		   $this->olddata .= $data;           if (!xml_parse($this->xml_obj, $data, feof($fp))) {               echo sprintf("<br>XML error: %s at line %d",               xml_error_string(xml_get_error_code($this->xml_obj)),               xml_get_current_line_number($this->xml_obj));               xml_parser_free($this->xml_obj);			   return false;           }       }		fclose($fp);*/		$handle = fopen( $path, "r");		$contents = '';		if (!$handle)		{         echo "<br>Cannot open XML data file: ".$path;					return false;		}		while (!feof($handle)) {		$contents .= fread($handle, 8192);		}		fclose($handle);		$data = $contents;       /*       if (!($data = @file_get_contents($path))) {	   		$this->createnew = true;           echo "<br>Cannot open XML data file: ".$path;           return false;       }*/              		   $this->olddata = $data;               if (!xml_parse($this->xml_obj, $data, true)) {              // echo sprintf("<br>XML error: %s at line %d",              // xml_error_string(xml_get_error_code($this->xml_obj)),             //  xml_get_current_line_number($this->xml_obj));             //  xml_parser_free($this->xml_obj);			   return false;           }       return true;   }   function startHandler($parser, $name, $attribs){		$name = strtolower($name);	   if(!empty($attribs))	   {	   		$attributes = "";			foreach ($attribs as $tag => $value) 			{				$attributes.= strtolower($tag).' = "'.$value.'"';			}	   }		if (strtolower($name) != "item" && $this->start == true)		{			$this->feed[0] .= "<".$name." ".$attributes." >";				}		else if (strtolower($name) == "item" && $this->start == true)		{			$this->middle = true; $this->start = false;			$this->feed[1] .= "<".$name.">";		}		else if ($this->middle == true && strtolower($name) != "channel")		{			$this->feed[1] .= "<".$name.">";		}   }   function dataHandler($parser, $data){	if ($this->start)	{		$this->feed[0] .= htmlentities($data);	}	else if ($this->middle)	{		$this->feed[1] .= htmlentities($data);//		$this->feed[1] .= $this->strip_htmlentities($data);	}   }   function endHandler($parser, $name){	$name = strtolower($name);		if ($this->end)		{			$this->feed[2] .= "</".$name.">";				}//		else if  (($this->middle == true || $this->pause == true) && strtolower($name) == "channel")		else if  (($this->start == true || $this->middle == true || $this->pause == true) && strtolower($name) == "channel")		{			$this->feed[2] .= "</".$name.">";			$this->end = true; $this->middle = false; $this->start = false;		} 		else if ($this->middle)		{			$this->feed[1] .= "</".$name.">";			if (strtolower($name) == "item") $this->total_items++;			if ($this->total_items==$this->max_items)			{				$this->pause = true;				$this->middle = false;			}		}		else if ($this->start)		{			$this->feed[0] .= "</".$name.">";				}   }	function getInsertBlock($title, $description, $link, $guid, $moreon="")	{		 $title=$this->GetXmlString($title);		 $description=$this->GetXmlString($description);		$item_start = "<item>\n";		$title_start = "<title>";				$title_end = "</title>\n";		$link_start = "<link>";				$link_end = "</link>\n";		$guid_start = "<guid>";				$guid_end = "</guid>\n";		$desc_start = "<description>\n";				$desc_end = htmlspecialchars($moreon)."</description>\n";		$item_end = "</item>\n";				$newfeed = $item_start.$title_start.$title.$title_end.$link_start.$link.$link_end.$guid_start.$guid.$guid_end.$desc_start.$description.$desc_end.$item_end;				$test_feed = '	<rss version="2.0">	<channel>	<link>http://www.test.com/</link>	<title>RSS feed for Control Panel</title>	<description> RSS feed for Control Panel</description>	<language>en-us</language>'.$newfeed.'	</channel>	</rss>';								$test_xml_obj = xml_parser_create();		if (!xml_parse($test_xml_obj, $test_feed, true)) {			echo sprintf("<br>Can't update feed.xml :: XML conversion error: %s at line %d",			xml_error_string(xml_get_error_code($test_xml_obj)),			xml_get_current_line_number($test_xml_obj)-11);			xml_parser_free($test_xml_obj);			$newfeed = "";		}						return $newfeed;		}	function updateFeedXML($url,$newfeed)	{		$xmlversion = "";		$feed_start = "";		$feedbody = "";		$feed_end = "";		$parseResult = $this->parse($url.'feed.xml');		if ($parseResult)		{			if ($this->createnew)			{				$xmlversion = '<?xml version="1.0"?>';				$feed_start = '	<rss version="2.0">	<channel>	<link>'.$url.'feed.xml</link>	<title>RSS feed for Control Panel</title>	<description> RSS feed for Control Panel</description>	<language>en-us</language>';				$feedbody = "";							$feed_end = "	</channel>	</rss>";			}			else			{				$xmlversion = substr($this->olddata,strpos($this->olddata,"<?"),strpos($this->olddata,"?>")-strlen(substr($this->olddata,0,strpos($this->olddata,"<?")))+2);				$feed_start = $this->feed[0];				$feedbody = $this->feed[1];				$feed_end = $this->feed[2];			}	if (strlen($feed_end) < 5)	{		$feed_end = "------->\n".$this->olddata;	}			$finalfeed = $xmlversion.$feed_start.$newfeed.$feedbody.$feed_end;	//			$feed_file_path = "temp_data/feed.xml"; for remote execution server						if (strlen(trim($feed_start)) > 10)			{				$feed_file_path = $this->createLocalFeed($finalfeed);			}			else			{				echo "<br>No Feed.xml found/cerated";				$feed_file_path = "";			}		}		else		{			$feed_file_path = "";		}		return $feed_file_path;	}// remove special chars function html2txt($document){$search = array('@<script[^>]*?>.*?</script>@si',  // Strip out javascript               '@<[\/\!]*?[^<>]*?>@si',            // Strip out HTML tags               '@<style[^>]*?>.*?</style>@siU',    // Strip style tags properly               '@<![\s\S]*?--,[ \t\n\r]*>@'        // Strip multi-line comments including CDATA);$text = preg_replace($search, '', $document);return $text;}  function GetXmlString($d)  {	$d=$this->html2txt($d);	$d=$this->strip_htmlentities($d);            	$d=stripslashes($d);	$d=str_replace('',' ',$d);	$d=str_replace('',' ',$d);	$d=str_replace('',' ',$d);	$d=stripslashes($d);	$d=$this->stripHtmlEntities2($d); 	$d=$this->strip_htmlentities($d); //	$d=htmlspecialchars($d);				$d=htmlspecialchars($d);			return $d;  }  function GetXmlStringFromOldData($d)  {	$d=str_replace('’',"'",$d);		$d=$this->html2txt($d);	$d=$this->strip_htmlentities($d);            	$d=stripslashes($d);	$d=str_replace('',' ',$d);	$d=str_replace('',' ',$d);	$d=str_replace('',' ',$d);	$d=stripslashes($d);	$d=$this->strip_htmlentities($d);  //	$d=$this->stripHtmlEntities2($d); 	          	return $d;  }  function strip_htmlentities($text){        //    '&ndash;'  => '-',      // '-'		 //   '&nbsp;'   => CHR( 32), // ' '		$html2iso = array(//        '&ndash;'  => '-',      // '-'				'&#150;'  => '',		       //'&nbsp;'   => CHR( 32), // ' '			'&lt;'  => '<',			    '&gt;'  => '>',	 		'&#128;'=> "", // '"'        '&#150;'  => '',      // '-'        '&#8217;'   => "'", // '''        '&#145;'   => "'", // '''        '&#146;'   => "'", // '''        '&#147;'   => '"', // '"'        '&#148;'   => '"', // '"'        '&#133;' => CHR(133), //        '&quot;'   => CHR( 34), // '"'        '&iexcl;'  => CHR(161), // ''        '&cent;'   => CHR(162), // ''        '&pound;'  => CHR(163), // ''        '&curren;' => CHR(164), // ''        '&yen;'    => CHR(165), // ''        '&brvbar;' => CHR(166), // ''        '&sect;'   => CHR(167), // ''        '&uml;'    => CHR(168), // ''        '&copy;'   => CHR(169), // ''        '&ordf;'   => CHR(170), // ''        '&laquo;'  => CHR(171), // ''        '&not;'    => CHR(172), // ''        '&shy;'    => CHR(173), // ''        '&reg;'    => CHR(174), // ''        '&macr;'   => CHR(175), // ''        '&deg;'    => CHR(176), // ''        '&plusmn;' => CHR(177), // ''        '&sup2;'   => CHR(178), // ''        '&sup3;'   => CHR(179), // ''        '&acute;'  => CHR(180), // ''        '&micro;'  => CHR(181), // ''        '&para;'   => CHR(182), // ''        '&middot;' => CHR(183), // ''        '&cedil;'  => CHR(184), // ''        '&sup1;'   => CHR(185), // ''        '&ordm;'   => CHR(186), // ''        '&raquo;'  => CHR(187), // ''        '&frac14;' => CHR(188), // ''        '&frac12;' => CHR(189), // ''        '&frac34;' => CHR(190), // ''        '&iquest;' => CHR(191), // ''        '&Agrave;' => CHR(192), // '�        '&Aacute;' => CHR(193), // '�        '&Acirc;'  => CHR(194), // '�        '&Atilde;' => CHR(195), // '�        '&Auml;'   => CHR(196), // '�        '&Aring;'  => CHR(197), // '�        '&AElig;'  => CHR(198), // '�        '&Ccedil;' => CHR(199), // '�        '&Egrave;' => CHR(200), // '�        '&Eacute;' => CHR(201), // '�        '&Ecirc;'  => CHR(202), // '�        '&Euml;'   => CHR(203), // '�        '&Igrave;' => CHR(204), // '�        '&Iacute;' => CHR(205), // '�        '&Icirc;'  => CHR(206), // '�        '&Iuml;'   => CHR(207), // '�        '&ETH;'    => CHR(208), // '�        '&Ntilde;' => CHR(209), // '�        '&Ograve;' => CHR(210), // '�        '&Oacute;' => CHR(211), // '�        '&Ocirc;'  => CHR(212), // '�        '&Otilde;' => CHR(213), // '�        '&Ouml;'   => CHR(214), // '�        '&times;'  => CHR(215), // '�        '&Oslash;' => CHR(216), // '�        '&Ugrave;' => CHR(217), // '�        '&Uacute;' => CHR(218), // '�        '&Ucirc;'  => CHR(219), // '�        '&Uuml;'   => CHR(220), // '�        '&Yacute;' => CHR(221), // '�        '&THORN;'  => CHR(222), // '�        '&szlig;'  => CHR(223), // '�        '&agrave;' => CHR(224), // '�        '&aacute;' => CHR(225), // '�        '&acirc;'  => CHR(226), // '�        '&atilde;' => CHR(227), // '�        '&auml;'   => CHR(228), // '�        '&aring;'  => CHR(229), // '�        '&aelig;'  => CHR(230), // '�        '&ccedil;' => CHR(231), // '�        '&egrave;' => CHR(232), // '�        '&eacute;' => CHR(233), // '�        '&ecirc;'  => CHR(234), // '�        '&euml;'   => CHR(235), // '�        '&igrave;' => CHR(236), // '�        '&iacute;' => CHR(237), // '�        '&icirc;'  => CHR(238), // '�        '&iuml;'   => CHR(239), // '�        '&eth;'    => CHR(240), // '�        '&ntilde;' => CHR(241), // '�        '&ograve;' => CHR(242), // '�        '&oacute;' => CHR(243), // '�        '&ocirc;'  => CHR(244), // '�        '&otilde;' => CHR(245), // '�        '&ouml;'   => CHR(246), // '�        '&divide;' => CHR(247), // '�        '&oslash;' => CHR(248), // ''        '&ugrave;' => CHR(249), // ''        '&uacute;' => CHR(250), // ''        '&ucirc;'  => CHR(251), // ''        '&uuml;'   => CHR(252), // ''        '&yacute;' => CHR(253), // ''        '&thorn;'  => CHR(254), // ''        '&yuml;'   => CHR(255)  // ''            );    reset($html2iso); unset($entities); unset($isochars);    while( list($key, $value) = each($html2iso) )    {       $entities[] = "/$key/";      // replacement      $isochars[] = $value;      $text = str_replace( $value,$key, $text);    }    return $text; } function stripHtmlEntities2( $string) {        $find_array = array (                "/&quot;/",                "/&amp;/",                "/&lt;/",                "/&gt;/",                "/&nbsp;/",                "/&iexcl;/",                "/&cent;/",                "/&pound;/",                "/&curren;/",                "/&yen;/",                "/&brvbar;/",                "/&sect;/",                "/&uml;/",                "/&copy;/",                "/&ordf;/",                "/&laquo;/",                "/&not;/",                "/&shy;/",                "/&reg;/",                "/&macr;/",                "/&deg;/",                "/&plusmn;/",                "/&sup2;/",                "/&sup3;/",                "/&acute;/",                "/&micro;/",                "/&para;/",                "/&middot;/",                "/&cedil;/",                "/&sup1;/",                "/&ordm;/",                "/&raquo;/",                "/&frac14;/",                "/&frac12;/",                "/&frac34;/",                "/&iquest;/",                "/&Agrave;/",                "/&Aacute;/",                "/&Acirc;/",                "/&Atilde;/",                "/&Auml;/",                "/&Aring;/",                "/&AElig;/",                "/&Ccedil;/",                "/&Egrave;/",                "/&Eacute;/",                "/&Ecirc;/",                "/&Euml;/",                "/&Igrave;/",                "/&Iacute;/",                "/&Icirc;/",                "/&Iuml;/",                "/&ETH;/",                "/&Ntilde;/",                "/&Ograve;/",                "/&Oacute;/",                "/&Ocirc;/",                "/&Otilde;/",                "/&Ouml;/",                "/&times;/",                "/&Oslash;/",                "/&Ugrave;/",                "/&Uacute;/",                "/&Ucirc;/",                "/&Uuml;/",                "/&Yacute;/",                "/&THORN;/",                "/&szlig;/",                "/&agrave;/",                "/&aacute;/",                "/&acirc;/",                "/&atilde;/",                "/&auml;/",                "/&aring;/",                "/&aelig;/",                "/&ccedil;/",                "/&egrave;/",                "/&eacute;/",                "/&ecirc;/",                "/&euml;/",                "/&igrave;/",                "/&iacute;/",                "/&icirc;/",                "/&iuml;/",                "/&eth;/",                "/&ntilde;/",                "/&ograve;/",                "/&oacute;/",                "/&ocirc;/",                "/&otilde;/",                "/&ouml;/",                "/&divide;/",                "/&oslash;/",                "/&ugrave;/",                "/&uacute;/",                "/&ucirc;/",                "/&uuml;/",                "/&yacute;/",                "/&thorn;/",                "/&yuml;/"        );        $replace_array = array (                '&#034;',                '&#038;',                '&#060;',                '&#062;',                '&#160;',                '&#161;',                '&#162;',                '&#163;',                '&#164;',                '&#165;',                '&#166;',                '&#167;',                '&#168;',                '&#169;',                '&#170;',                '&#171;',                '&#172;',                '&#173;',                '&#174;',                '&#175;',                '&#176;',                '&#177;',                '&#178;',                '&#179;',                '&#180;',                '&#181;',                '&#182;',                '&#183;',                '&#184;',                '&#185;',                '&#186;',                '&#187;',                '&#188;',                '&#189;',                '&#190;',                '&#191;',                '&#192;',                '&#193;',                '&#194;',                '&#195;',                '&#196;',                '&#197;',                '&#198;',                '&#199;',                '&#200;',                '&#201;',                '&#202;',                '&#203;',                '&#204;',                '&#205;',                '&#206;',                '&#207;',                '&#208;',                '&#209;',                '&#210;',                '&#211;',                '&#212;',                '&#213;',                '&#214;',                '&#215;',                '&#216;',                '&#217;',                '&#218;',                '&#219;',                '&#220;',                '&#221;',                '&#222;',                '&#223;',                '&#224;',                '&#225;',                '&#226;',                '&#227;',                '&#228;',                '&#229;',                '&#230;',                '&#231;',                '&#232;',                '&#233;',                '&#234;',                '&#235;',                '&#236;',                '&#237;',                '&#238;',                '&#239;',                '&#240;',                '&#241;',                '&#242;',                '&#243;',                '&#244;',                '&#245;',                '&#246;',                '&#247;',                '&#248;',                '&#249;',                '&#250;',                '&#251;',                '&#252;',                '&#253;',                '&#254;',                '&#255;'        );        $string = preg_replace ( $find_array, $replace_array, $string );        return $string; } function getSiteFeedContents($url){	$fileurl = $url."feed.xml"; 	if(function_exists("fopen"))	{		$resp = "";		$fp = @fopen($url.$fileurl,"r");		if(!$fp)		{			echo "<br>&nbsp;Unable to get ".$url."feed.zml";			return false;		}		else		{			while(!feof($fp))			{				$resp .= fgets($fp);			}			fclose($fp);		}	}	else if(function_exists("curl_init"))	{		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $url.$fileurl);		curl_setopt($ch, CURLOPT_HEADER, 0);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 				$resp = curl_exec($ch); 		curl_close ($ch);	}	return $resp;}function createLocalFeed($finalfeed){	$feed_file_path = $this->feeddir."feed.xml";	$outfile = @fopen($feed_file_path,"wb");  	fflush($outfile);	$written = @fputs($outfile,$finalfeed);	if (!$outfile)	{		echo "<br>Can't open to write -: ".$feed_file_path;		$feed_file_path = "";	}	else if (!$written)	{		echo "<br>Can't Write : ".$feed_file_path;		$feed_file_path = "";	}	else	{		@fclose($outfile);	}return $feed_file_path;} } ?>